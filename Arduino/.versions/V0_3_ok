/*
 * main.cpp
 *
 *  Created on: 14 oct. 2016
 *      Author: jo
 */
#include "Arduino.h"

#define CLOCK_WIND	HIGH
#define C_CLOCK_WIND	LOW
#define ENABLE 		LOW
#define DISABLE 	HIGH
//#define DELAY_DRIVER	5 // Active if is need by your stepper driver.

/* Motor of winding */
#define M1_DIR		10
#define M1_STEP  	9
#define M1_EN		8
#define M1_STEPS_PER_TR 400

/* Mode of carriage */
#define M2_DIR		7
#define M2_STEP		6
#define M2_EN		5
#define M2_STEPS_PER_TR 400

struct MOTOR
{
  int dirPin;
  int stepPin;
  int enablePin;
  int stepsPerTr;
};

struct MOTOR MOTOR_A;
struct MOTOR MOTOR_B;

/* winding setting */
const float leadScrewPitch = 0.8;
float coilLength = 40.5;
float wireSize	 = 0.22;
int windingTurn = 3500;

void initStruct(struct MOTOR *motor, int _dirPin, int _stepPin,
		int _enablePin, int _stepPerTr);
float pitchToSteps(float _wireSize, int _M2_stepsPerTr, float _leadscrewPitch);
float reduction(int _M1_stepsPerTr, float _pitchToSteps);

/* SETUP ---------------------------------------------------------------------*/
void setup()
{


  initStruct(&MOTOR_A, M1_DIR, M1_STEP, M1_EN, M1_STEPS_PER_TR);
  initStruct(&MOTOR_B, M2_DIR, M2_STEP, M2_EN, M2_STEPS_PER_TR);

  Serial.begin(115200);
  Serial.print("begin");
  Serial.print("\n");
  delay(1000);

  for(int i = 5; i<=10; i++)
    {
      pinMode(i, OUTPUT);
    }
  pinMode(13, OUTPUT);

  digitalWrite(MOTOR_A.enablePin, ENABLE);
  digitalWrite(MOTOR_B.enablePin, ENABLE);

}

void loop()
{
  unsigned long delayMotor_A = 1200;
  unsigned long previousMillisMotor_A = 0;
  unsigned long previousMillisMotor_B = 0;

  // Steps for carriage depending wire size.
  float pitchSteps = pitchToSteps(wireSize, MOTOR_B.stepsPerTr, leadScrewPitch);
  // Reduction ratio depending wire size.
  float ratio = reduction(MOTOR_A.stepsPerTr, pitchSteps);

  unsigned long delayRatio = (unsigned long)(ratio * delayMotor_A);

  Serial.print("Ratio : ");
  Serial.print(ratio);
  Serial.print("/ delay ratio : ");
  Serial.print(delayRatio);
  Serial.print("\n");
  delay(1000);

  while(1)
    {
      unsigned long currentMillis = micros();

      if (currentMillis - previousMillisMotor_A >= delayMotor_A)
	{
	  previousMillisMotor_A = currentMillis;
	  digitalWrite(MOTOR_A.stepPin, HIGH);
#ifdef  DELAY_DRIVER
	  delayMicroseconds();
#endif
	  digitalWrite(MOTOR_A.stepPin, LOW);
	}

      if (currentMillis - previousMillisMotor_B >= delayRatio)
	{
	  previousMillisMotor_B = currentMillis;
	  digitalWrite(MOTOR_B.stepPin, HIGH);
#ifdef  DELAY_DRIVER
	  delayMicroseconds();
#endif
	  digitalWrite(MOTOR_B.stepPin, LOW);
	}

    }
}

/******************************************************************************
 * brief   : Structure initialization.
 * details : Initialize structure for stepper.
 * return  : Nothing.
 ******************************************************************************/
void initStruct(struct MOTOR *motor, int _dirPin, int _stepPin,
		int _enablePin, int _stepPerTr)
{
  motor->dirPin		= _dirPin;
  motor->stepPin	= _stepPin;
  motor->enablePin	= _enablePin;
  motor->stepsPerTr	= _stepPerTr;
}


/******************************************************************************
 * brief   : Steps for one turn depending wire size.
 * details : Return number of microsteps for carriage motor required
 * to advance when coil made one turn.
 * _wireSize, diameter of wire in mm.
 * _stepsByTurn, steps to make one turn.
 * _leadscrewPitch in mm
 * return  : Number of steps from size of wire.
 ******************************************************************************/
float pitchToSteps(float _wireSize, int _M2_stepsPerTr, float _leadscrewPitch)
{
  float wireSteps = (_M2_stepsPerTr * _wireSize) / _leadscrewPitch;

  return wireSteps;
}

/******************************************************************************
 * brief   : Reduction ratio calculation.
 * details : Return reduction ratio due between motors.
 * _M1_stepPerTr, steps for one turn one wind motor.
 * _pitchToStepss, steps value returned by "pitchToStep".
 * return  : The Reduction ratio.
 ******************************************************************************/
float reduction(int _M1_stepsPerTr, float _pitchToSteps)
{
  float ratio = 0;
  return  ratio = _M1_stepsPerTr/_pitchToSteps;
}
